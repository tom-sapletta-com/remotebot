# GitHub Actions CI/CD Pipeline dla Remote Automation
# Automatyczne testy przy każdym push i pull request

name: Remote Automation CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Uruchom co noc o 2:00 UTC
    - cron: '0 2 * * *'

jobs:
  # Job 1: Testy podstawowe
  basic-tests:
    name: Basic Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pillow requests pynput PyYAML pytest pytest-html
      
      - name: Lint Python code
        run: |
          pip install flake8
          flake8 automation/*.py --max-line-length=120 --ignore=E501,W503
      
      - name: Run unit tests
        run: |
          pytest tests/ --html=report.html --self-contained-html || true
      
      - name: Upload test report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-report
          path: report.html

  # Job 2: Testy Docker Build
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Build VNC Desktop Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: automation-vnc:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build Controller Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.controller
          push: false
          tags: automation-controller:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 3: Testy integracyjne z Docker Compose
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: docker-build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Free up disk space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          df -h
      
      - name: Setup environment
        run: |
          chmod +x setup.sh
          ./setup.sh
      
      - name: Start Docker Compose
        run: |
          docker-compose up -d
          echo "Waiting for services to start..."
          sleep 60
      
      - name: Check services health
        run: |
          docker-compose ps
          docker-compose logs
      
      - name: Wait for Ollama model download
        run: |
          echo "Waiting for Ollama model to download..."
          timeout 600 bash -c 'until docker exec automation-ollama ollama list | grep -q llava; do sleep 10; done' || true
      
      - name: Run integration tests
        run: |
          python3 run_tests.py --wait > test_output.txt || true
          cat test_output.txt
      
      - name: Check test results
        run: |
          if [ -f results/test_results.json ]; then
            cat results/test_results.json
            python3 -c "
import json, sys
with open('results/test_results.json') as f:
    data = json.load(f)
    failed = data.get('summary', {}).get('failed', 0)
    if failed > 0:
        print(f'❌ {failed} tests failed')
        sys.exit(1)
    print('✅ All tests passed')
"
          else
            echo "⚠️ No test results found"
            exit 1
          fi
      
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: |
            results/
            test_output.txt
      
      - name: Upload debug screenshots
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: debug-screenshots
          path: debug_screenshots/
      
      - name: Cleanup
        if: always()
        run: |
          docker-compose logs > docker-logs.txt
          docker-compose down -v
      
      - name: Upload Docker logs
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: docker-logs
          path: docker-logs.txt

  # Job 4: Testy scenariuszy
  scenario-tests:
    name: Scenario Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: docker-build
    strategy:
      matrix:
        scenario:
          - test_connection
          - test_firefox
          - test_terminal
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup and start services
        run: |
          chmod +x setup.sh
          ./setup.sh
          docker-compose up -d
          sleep 90
      
      - name: Run scenario: ${{ matrix.scenario }}
        run: |
          docker-compose exec -T automation-controller \
            python3 automation_cli.py \
            test_scenarios/test_basic.yaml \
            --run ${{ matrix.scenario }} || true
      
      - name: Cleanup
        if: always()
        run: docker-compose down -v

  # Job 5: Security scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 6: Publikacja dokumentacji
  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Build documentation
        run: |
          mkdir -p docs_output
          cp *.md docs_output/
          echo "<html><body><h1>Remote Automation Documentation</h1>" > docs_output/index.html
          echo "<ul>" >> docs_output/index.html
          for file in docs_output/*.md; do
            filename=$(basename "$file")
            echo "<li><a href='$filename'>$filename</a></li>" >> docs_output/index.html
          done
          echo "</ul></body></html>" >> docs_output/index.html
      
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs_output

# Konfiguracja notyfikacji (opcjonalnie)
# - Slack
# - Email
# - Discord
# Dodaj w Settings → Secrets → Actions
